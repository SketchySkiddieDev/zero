name: Build and Publish APK

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2

    - name: Decode keystore
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > $HOME/keystore.jks
        echo "KEYSTORE_PATH=$HOME/keystore.jks" >> $GITHUB_ENV
        echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
        echo "KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }}" >> $GITHUB_ENV
        echo "KEYSTORE_ALIAS_PASSWORD=${{ secrets.KEYSTORE_ALIAS_PASSWORD }}" >> $GITHUB_ENV

    - name: Get version name from Gradle
      id: get_version
      run: |
        # Capture the version name cleanly from Gradle output
        VERSION_NAME=$(./gradlew -q printVersionName)

        # Clean up the version string by removing unwanted lines (e.g., 'GotbuildFinished')
        VERSION_NAME=$(echo "$VERSION_NAME" | grep -oP '\d+\.\d+\.\d+')  # Match the version pattern (e.g., 2.0.10)

        # Check the captured version name (for debugging purposes)
        echo "Captured Version Name: '$VERSION_NAME'"

        # Export the clean version name for later use
        echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV

    - name: Create a Git tag
      run: |
        echo "Tagging with version: $VERSION_NAME"
        git tag "v$VERSION_NAME"
        git push origin "v$VERSION_NAME"  # Ensure the tag is pushed to the remote repository

    - name: Build the APK
      run: ./gradlew assembleRelease

    - name: Upload APK to GitHub Releases
      uses: softprops/action-gh-release@v1
      with:
        files: app/build/outputs/apk/release/app-release.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
