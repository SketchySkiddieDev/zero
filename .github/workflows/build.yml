name: Build and Publish APK

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on PR to the main branch
  workflow_dispatch:  # Allow manual trigger of the workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'  # Specify Java version
        distribution: 'temurin'  # Specify JDK distribution (Eclipse Temurin)

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2

    - name: Decode keystore
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > $HOME/keystore.jks
        echo "KEYSTORE_PATH=$HOME/keystore.jks" >> $GITHUB_ENV
        echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
        echo "KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }}" >> $GITHUB_ENV
        echo "KEYSTORE_ALIAS_PASSWORD=${{ secrets.KEYSTORE_ALIAS_PASSWORD }}" >> $GITHUB_ENV

    - name: Verify keystore exists
      run: |
        echo "Keystore path: $HOME/keystore.jks"
        ls -l $HOME/keystore.jks  # Check if the keystore exists

    - name: Build the APK
      run: ./gradlew assembleRelease

    - name: Get version name
      id: version
      run: |
        VERSION_NAME=$(./gradlew -q printVersionName)
        echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV
        echo "::set-output name=version_name::$VERSION_NAME" # Optional output for later use

    - name: Check if tag exists
      id: check_tag
      run: |
        TAG_EXISTS=$(git tag -l "v${{ env.VERSION_NAME }}")
        if [ -n "$TAG_EXISTS" ]; then
          echo "Tag v${{ env.VERSION_NAME }} already exists. Skipping tag creation."
          echo "tag_exists=true" >> $GITHUB_ENV
        else
          echo "Tagging with version: ${{ env.VERSION_NAME }}"
          git tag "v${{ env.VERSION_NAME }}"
          echo "tag_exists=false" >> $GITHUB_ENV
        fi

    - name: Push tag if not exists
      run: |
        if [ "${{ env.tag_exists }}" == "false" ]; then
          git push origin "v${{ env.VERSION_NAME }}"
        else
          echo "Tag already exists, skipping push."
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # Optional: Force push the tag if needed (use caution)
    - name: Force push the tag (optional)
      run: |
        if [ "${{ env.tag_exists }}" == "false" ]; then
          echo "Tagging and force-pushing v${{ env.VERSION_NAME }}"
          git tag -f "v${{ env.VERSION_NAME }}"
          git push --force origin "v${{ env.VERSION_NAME }}"
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload APK to GitHub Releases
      uses: softprops/action-gh-release@v1
      with:
        files: app/build/outputs/apk/release/app-release.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
