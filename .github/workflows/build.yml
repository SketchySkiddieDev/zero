name: Build and Publish APK

on:
  push:
    tags:
      - 'v*.*.*'  # This will trigger on version tags like v1.0.0, v1.1.0, etc.
    branches:
      - main  # Trigger the workflow on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on PR to the main branch
  workflow_dispatch:  # Allow manual trigger of the workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'  # Specify Java version
        distribution: 'temurin'  # Specify JDK distribution (Eclipse Temurin)

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Set up Gradle
      uses: gradle/gradle-build-action@v2

    - name: Decode keystore
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > $HOME/keystore.jks
        echo "KEYSTORE_PATH=$HOME/keystore.jks" >> $GITHUB_ENV
        echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
        echo "KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }}" >> $GITHUB_ENV
        echo "KEYSTORE_ALIAS_PASSWORD=${{ secrets.KEYSTORE_ALIAS_PASSWORD }}" >> $GITHUB_ENV

    - name: Verify keystore exists
      run: |
        echo "Keystore path: $HOME/keystore.jks"
        ls -l $HOME/keystore.jks  # Check if the keystore exists

    - name: Get version from gradle
      id: get_version
      run: |
        VERSION=$(./gradlew -q printVersion)  # This assumes you have a task to print the version
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "The version is: $VERSION"

    - name: Build the APK
      run: ./gradlew assembleRelease

    - name: Sign the APK
      run: |
        ./gradlew signingReport
        ./gradlew assembleRelease -PsigningConfig=release

    - name: Tag the release with version from gradle
      run: |
        VERSION_TAG="v${{ env.VERSION }}"  # Use the version from gradle
        echo "Tagging release with version: $VERSION_TAG"
        git tag "$VERSION_TAG"  # Create the tag
        git push origin "$VERSION_TAG"  # Push the tag to GitHub

    - name: Upload APK to GitHub Releases
      uses: softprops/action-gh-release@v1
      with:
        files: app/build/outputs/apk/release/app-release.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
