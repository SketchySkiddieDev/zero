name: Build and Publish APK

on:
  push:
    branches:
      - main  # Trigger the workflow on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on PR to the main branch
  workflow_dispatch:  # Allow manual trigger of the workflow

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'  # Specify Java version
        distribution: 'temurin'  # Specify JDK distribution (Eclipse Temurin)

    - name: Cache Gradle dependencies
      uses: actions/cache@v2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Set up Gradle
      uses: gradle/gradle-build-action@v3  # Correct version (use v3, as v2 may be deprecated)

    - name: Decode keystore
      run: |
        echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > $HOME/keystore.jks
        echo "KEYSTORE_PATH=$HOME/keystore.jks" >> $GITHUB_ENV
        echo "KEYSTORE_PASSWORD=${{ secrets.KEYSTORE_PASSWORD }}" >> $GITHUB_ENV
        echo "KEYSTORE_ALIAS=${{ secrets.KEYSTORE_ALIAS }}" >> $GITHUB_ENV
        echo "KEYSTORE_ALIAS_PASSWORD=${{ secrets.KEYSTORE_ALIAS_PASSWORD }}" >> $GITHUB_ENV

    - name: Verify keystore exists
      run: |
        echo "Keystore path: $HOME/keystore.jks"
        ls -l $HOME/keystore.jks  # Check if the keystore exists

    # Debugging Step: Print the environment variables to confirm the values
    - name: Print environment variables
      run: |
        echo "KEYSTORE_PATH: $KEYSTORE_PATH"
        echo "KEYSTORE_PASSWORD: $KEYSTORE_PASSWORD"
        echo "KEYSTORE_ALIAS: $KEYSTORE_ALIAS"
        echo "KEYSTORE_ALIAS_PASSWORD: $KEYSTORE_ALIAS_PASSWORD"

    - name: Build the APK
      run: ./gradlew assembleRelease

    - name: Sign the APK
      run: |
        ./gradlew signingReport
        ./gradlew assembleRelease -PsigningConfig=release
     
    - name: Get version name from Gradle
      id: get_version
      run: |
        VERSION_NAME=$(./gradlew -q printVersionName | tr -d '\r\n')  # Remove newlines or carriage returns
        echo "VERSION_NAME=$VERSION_NAME"  # Debug the extracted version name
        echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV  # Store the version name in GitHub environment

    - name: Create a Git tag
      run: |
        VERSION_NAME=$(./gradlew -q printVersionName)  # Capture output from Gradle
        VERSION_NAME=$(echo "$VERSION_NAME" | tr -d '\r\n')  # Remove any unwanted carriage returns/newlines
        echo "VERSION_NAME=$VERSION_NAME"  # Debug the extracted version name
        echo "VERSION_NAME=$VERSION_NAME" >> $GITHUB_ENV  # Store the version name in GitHub environment

    - name: Upload APK to GitHub Releases
      uses: softprops/action-gh-release@v1
      with:
        files: app/build/outputs/apk/release/app-release.apk
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
